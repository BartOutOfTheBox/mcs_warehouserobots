/**
Onze testfiles
*/


include <mx>

procedure doorstuurchecks(){
	theories = {
		{th1, "The robot can go to inacessible locations"},
		{th2, "Pallets can be on inaccessible locations"},
		{th3, "Pallets can be on multiple locations"},
		{th4, "Pallets can be on eachother, but on different locations"},
		{th5, "The robot can carry more than one"},
		{th6, "Pallets can be on the same position as the robot, but not being carried (or the other way round: can be carried but on different position)"},
		{th7, "There can be more than one pallet on the floor on a given location"},
		{th8, "Some pallets do not obey gravity"},
		{th9, "At a certain location, there is a stack which is too high"},
		{th10, "The robot can stand at an accessible location"}
	}
	
	
	basetheo = merge(solution, DEFINITIONS)
	for i = 1, #theories do
		local th = merge(theories[i][1],basetheo)
		local issat = sat(th,testStruc)
		if issat then 
			print("---FAIL: "..getname(theories[i][1])..": "..theories[i][2])
		else
			print("+verification of "..getname(theories[i][1]).." succeeded! ")
		end
	end
}

vocabulary OUREXTENDEDwarehousevoc{
	extern vocabulary warehousevoc
	
	// extra
	OUREXTENDEDobeysgravity(Time,pallet)
	OUREXTENDEDonthefloor(Time,pallet)
}

theory DEFINITIONS : OUREXTENDEDwarehousevoc {    
    { !p,t: OUREXTENDEDonthefloor(t,p) <- ~carried(t,p) & ~?p2: on(t,p,p2). }
    

    {	!p,t: OUREXTENDEDobeysgravity(t,p) <- OUREXTENDEDonthefloor(t,p) | carried(t,p).
    	!p,t: OUREXTENDEDobeysgravity(t,p) <- ?p2: OUREXTENDEDobeysgravity(t,p2) & on(t,p,p2). }
    
}


theory th1 : OUREXTENDEDwarehousevoc{
~(	    !t: ~inaccessible(robotposition(t))	).
}

theory th2 : OUREXTENDEDwarehousevoc{
~(	    !p,t: ~inaccessible(position(t,p))	).
}


theory th3 : OUREXTENDEDwarehousevoc{
~(	    !p1,t: ?=<1 p2: on(t,p2,p1)	).
}


theory th4 : OUREXTENDEDwarehousevoc{
~(	    !p1 p2 t: on(t,p1,p2) => position(t,p1)=position(t,p2)	).
}


theory th5 : OUREXTENDEDwarehousevoc{
~(	   !t: #{p: carried(t,p)} =< 1	).
}


theory th6 : OUREXTENDEDwarehousevoc{
~(	    !p,t: position(t,p)=robotposition(t) <=> carried(t,p)	).
}


theory th7 : OUREXTENDEDwarehousevoc{
~(	    !l,t: #{p : position(t,p)=l & OUREXTENDEDonthefloor(t,p)}=<1	).
}


theory th8 : OUREXTENDEDwarehousevoc{
~(	    !p,t: OUREXTENDEDobeysgravity(t,p)	).
}


theory th9 : OUREXTENDEDwarehousevoc{
~(	    !l,t: #{p: position(t,p)=l}=<ceiling	).
}

theory th10 : OUREXTENDEDwarehousevoc{
~(      !t : ? p: robotposition(t)=p	).
}



structure testStruc:OUREXTENDEDwarehousevoc{
	Time = {0}
	Start = 0
	Next = {}
	xco={1..3}
	yco={1..3}
	height = {0..5}
	pallet={p1;p2;p3; p4}
}