/** 
* Skeleton for the second part of the project. 
*
* No names in this skeleton can be changed, you can add things to the vocabulary and you should definitely add stuff to the theory. 
*/

include<LTC>

LTCvocabulary warehousevoc{
	type Time
	Start: Time
	partial Next(Time):Time

	type pallet
	type action constructed from {rotateRight, rotateLeft, moveFront, moveBack, pickUp(pallet), putDown(pallet)}	
	execute(Time,action)

	on(Time,pallet,pallet)
	// Helper predicates
	I_on(pallet,pallet)	// Initial
	C_on(Time,pallet,pallet)	// Causes
	Cn_on(Time,pallet,pallet)	// Causes not
	
	carried(Time,pallet)
	// Helper predicates
	I_carried(pallet)	// Initial
	C_carried(Time,pallet)	// Causes
	Cn_carried(Time,pallet)	// Causes not

	type xco isa nat
	type yco isa nat	
	type location constructed from {grid(xco,yco)}
	inaccessible(location)
	
	robotposition(Time): location
	// Helper predicates
	I_robotposition(location)		// Initial
	C_robotposition(Time,location)	// Causes
	Cn_robotposition(Time,location)	// Causes not
	
	position(Time,pallet): location
	// Helper predicates
	I_position(pallet,location)			// Initial
	C_position(Time,pallet,location)	// Causes
	Cn_position(Time,pallet,location)	// Causes not
	
	
	type dir constructed from {north, east, south, west}
	facing(Time): dir
	// Helper predicates
	I_facing(dir)
	C_facing(Time,dir)
	Cn_facing(Time,dir)
	
	type height isa nat
	ceiling: height
	
	// above(p1,p2) means p1 is located above p2. 
	// (eg. if on(p1,p3) & on(p3,p2) then above(p1,p3) & above (p3,p2) & above (p1,p2))
	above(Time, pallet,pallet)
    
	// Each pallet is located on a certain height.
	// The top of the pallet counts as the point of height.
	// A pallet standing on the floor thus has height 1.
	heightOf(Time, pallet): height
	
	// free(t,p) means it is possible to pick up pallet p at timestamp t.
	free(Time, pallet)
	
	// Denotes the next grid(xco,yco) the robot would be on if it were to move forwards.
	partial nextPosition(Time): location
	// Denotes the next grid(xco,yco) the robot would be on if it were to move backwards.
	partial prevPosition(Time): location
}

theory solution: warehousevoc{
	// Inaccessible positions are inaccessible for robots.
	! l [location], t [Time]: inaccessible(l) => (robotposition(t) ~= l).
    
	// Inaccessible positions are inaccessible for pallets.
	! l [location], p [pallet], t [Time]: inaccessible(l) => (position(t, p) ~= l).
    
	// The robot can carry no more than one pallet at a time, hence:
	// If both pallet1 and pallet2 are carried by the robot, pallet1 and pallet2 are the same pallet.
	! p1 [pallet], p2 [pallet], t [Time]: (carried(t, p1) & carried(t, p2)) => p1 = p2.
    
	// The robot cannot stand on a stack of pallets, hence, pallets only have the same position as the robot 
	// when they are being carried by the robot.
	! p [pallet], t [Time]:  (position(t, p) = robotposition(t)) <=> carried(t, p).
    
	// Helper for the next expression. a pallet p1 is above another pallet p2 if above(p1,p2). 
	// There may or may not be other pallets in between.
	{
		! p1 [pallet], p2 [pallet], t [Time]: above(t,p1,p2) <- on(t,p1,p2).
		! p1 [pallet], p2 [pallet], p3 [pallet], t [Time]: 
			above(t,p1,p3) <- above(t,p1,p2) & above(t,p2,p3).
	}
    
	// It cannot be the case that pallet p1 is above pallet p2 and at the same time pallet p2 is above p1.
	// Therefore pallet p1 cannot rest on pallet p2 if pallet p2 rests on pallet p1.
	! p1 [pallet], p2 [pallet], t [Time]: above(t,p1,p2) => (~above(t,p2,p1)).
    
	// At most one other pallet resting on every other pallet.
	// Hence if two pallets are resting on the same pallet, the former two are actually the same pallet.
	! p1 [pallet], p2 [pallet], p3 [pallet], t [Time]: (on(t,p1,p3) & on(t,p2,p3)) => (p1 = p2).
    
	// Height pallet - 1: The amount of pallets on the same position, which are not above this pallet.
	! p1 [pallet], t [Time]: heightOf(t,p1) = 
		#{p2 [pallet]: (position(t,p1) = position(t,p2)) & (~above(t,p2, p1))}.
    
	// Stacks of pallets are limited in height by the ceiling of the warehouse.
	! p [pallet], t [Time]: heightOf(t,p) =< ceiling.
	
	// Pallets on top of each other, have to have the same location.
	! p1 [pallet], p2 [pallet], t [Time]: on(t,p1,p2) => (position(t,p1) = position(t,p2)).
	
	// At most one pallet resting on the floor on the same location.
	// Hence if two pallets are resting on the same location on the floor, these pallets are actually the same pallet.
	! p1 [pallet], p2 [pallet], t [Time]: 
		~above(t,p1,p2) & ~above(t,p2,p1) & (p1 ~= p2) 
			=> (position(t,p1) ~= position(t,p2)).
	
	// TODO doc rules for next pos
	{
		! l1 [location], x2 [xco], y2 [yco], t [Time]:
			nextPosition(t) = l1 <- 
				(facing(t) = north) &
				(robotposition(t) = grid(x2,y2)) &
				(l1 = grid(x2,(y2+1))).
				
		! l1 [location], x2 [xco], y2 [yco], t [Time]:
			nextPosition(t) = l1 <- 
				(facing(t) = east) &
				(robotposition(t) = grid(x2,y2)) &
				(l1 = grid((x2+1),y2)).
				
		! l1 [location], x2 [xco], y2 [yco], t [Time]:
			nextPosition(t) = l1 <- 
				(facing(t) = south) &
				(robotposition(t) = grid(x2,y2)) &
				(l1 = grid(x2,(y2-1))).
				
		! l1 [location], x2 [xco], y2 [yco], t [Time]:
			nextPosition(t) = l1 <- 
				(facing(t) = west) &
				(robotposition(t) = grid(x2,y2)) &
				(l1 = grid((x2-1),y2)).
	}
	
	//TODO doc rules for prevPosition here.
	{
		! l1 [location], x2 [xco], y2 [yco], t [Time]:
			prevPosition(t) = l1 <- 
				(facing(t) = north) &
				(robotposition(t) = grid(x2,y2)) &
				(l1 = grid(x2,(y2-1))).
				
		! l1 [location], x2 [xco], y2 [yco], t [Time]:
			prevPosition(t) = l1 <- 
				(facing(t) = east) &
				(robotposition(t) = grid(x2,y2)) &
				(l1 = grid((x2-1),y2)).
				
		! l1 [location], x2 [xco], y2 [yco], t [Time]:
			prevPosition(t) = l1 <- 
				(facing(t) = south) &
				(robotposition(t) = grid(x2,y2)) &
				(l1 = grid(x2,(y2+1))).
				
		! l1 [location], x2 [xco], y2 [yco], t [Time]:
			prevPosition(t) = l1 <- 
				(facing(t) = west) &
				(robotposition(t) = grid(x2,y2)) &
				(l1 = grid((x2+1),y2)).
	}
	
	// a pallet is free to be picked up if and only if it's not being carried, and there does not exist a pallet which is standing on it.
	! p [pallet], t [Time]: free(t,p) <=> (~carried(t,p) & ~(? p2 [pallet]: on(t,p2,p))).
	
	// ________________________________________________________________
	//                   THEORY FOR DYNAMICS
	// ________________________________________________________________
	
	// The robot can only do one action at a time
	! a1 [action], a2 [action], t [Time]:
		execute(t,a1) & execute(t,a2) => a1 = a2.
	{ 
		// Successor State Action Axiom & Inertia on(Time,pallet,pallet)
		! p1 [pallet], p2 [pallet]: on(Start,p1,p2) <- I_on(p1,p2).
		! p1 [pallet], p2 [pallet], t [Time]: 
			on(Next(t),p1,p2) <- C_on(t,p1,p2).
		! p1 [pallet], p2 [pallet], t [Time]: 
			on(Next(t),p1,p2) <- on(t,p1,p2) & ~Cn_on(t,p1,p2).
	}
	
	{
		// Expressing causations on(Time,pallet,pallet)
		! p1 [pallet], p2 [pallet], t [Time] : 
			C_on(t,p1,p2) <- ? l [location] :
				(p1 ~= p2) &
				execute(t,putDown(p1)) &
				(position(t,p2) = l) &
				(nextPosition(t) = l) &
				free(t,p2).
		! p1 [pallet], p2 [pallet], t [Time] :
			Cn_on(t,p1,p2) <- (p1 ~= p2) & execute(t,pickUp(p1)).
	}
	
	// You can only put down pallets you carry
	! p [pallet], t [Time]: execute(t,putDown(p)) => carried(t,p).
	
	// You can only pick up pallets in front of you
	! p [pallet], t [Time]: 
		execute(t,pickUp(p)) => (nextPosition(t) = position(t,p)).
		
	// You can only pick up free pallets
	! p [pallet], t [Time]:
		execute(t,pickUp(p)) => free(t,p).
	{
		// Successor State Action Axiom & Inertia carried(Time,pallet)
		! p [pallet]: carried(Start,p) <- I_carried(p).
		! p [pallet], t [Time]: carried(Next(t),p) <- C_carried(t,p).
		! p [pallet], t [Time]: 
			carried(Next(t),p) <- carried(t,p) & ~Cn_carried(t,p).	
	}
	
	{
		// Expressing causations carried(Time,pallet)
		! p [pallet], t [Time]:
			C_carried(t,p) <- execute(t,pickUp(p)).
		! p [pallet], t[Time]:
			Cn_carried(t,p) <- execute(t,putDown(p)).
	}
	
	{ 
		// Successor State Action Axiom & Inertia facing(t):dir
		! d [dir]: facing(Start) = d <- I_facing(d).
		! d [dir], t [Time]: 
			facing(Next(t)) = d <- C_facing(t,d).
		! d [dir], t [Time]: 
			facing(Next(t)) = d <- (facing(t)=d) & ~Cn_facing(t,d).
	}
	
	{
		// Expressing causations facing(t):dir
		// North to East
		! t [Time] : 
			C_facing(t,east) <- (facing(t)=north) & execute(t,rotateRight).
		// East to South
		! t [Time] : 
			C_facing(t,south) <- (facing(t)=east) & execute(t,rotateRight).
		// South to West
		! t [Time] : 
			C_facing(t,west) <- (facing(t)=south) & execute(t,rotateRight).
		// West to North
		! t [Time] : 
			C_facing(t,north) <- (facing(t)=west) & execute(t,rotateRight).
		
		// North to West
		! t [Time] : 
			C_facing(t,west) <- (facing(t)=north) & execute(t,rotateLeft).
		// West to South
		! t [Time] : 
			C_facing(t,south) <- (facing(t)=west) & execute(t,rotateLeft).
		// South to East
		! t [Time] : 
			C_facing(t,east) <- (facing(t)=south) & execute(t,rotateLeft).
		// East to North
		! t [Time] : 
			C_facing(t,north) <- (facing(t)=east) & execute(t,rotateLeft).
		
		// Reason not to have the same facing, is turning.
		! d [dir], t [Time] :
			Cn_facing(t,d) <- 
				(facing(t)=d) & 
				(execute(t,rotateRight) | execute(t,rotateLeft)).
	}
	
	// The robot cannot go forwards if a pallet is blocking him.
	! t [Time]: (? p [pallet]: nextPosition(t) = position(t,p))
					=> ~execute(t,moveFront).
	! t [Time]: (? p [pallet]: prevPosition(t) = position(t,p))
					=> ~execute(t,moveBack).				

	{
		// Successor State Action Axiom & Inertia robotposition(Time):location
		! l [location]: robotposition(Start) = l <- I_robotposition(l).
		! l [location], t [Time]: 
			robotposition(Next(t)) = l <- C_robotposition(t,l).
		! l [location], t [Time]: 
			robotposition(Next(t)) = 
				l <- (robotposition(t) = l) & ~Cn_robotposition(t,l).
	}
	
	{
		// Expressing causations robotposition(Time):location
		// Going forwards
		! l [location], t [Time] : 
			C_robotposition(t,l) <- 
				(nextPosition(t) = l) &
				(execute(t,moveFront)).
		// Going backwards
		! l [location], t [Time] : 
			C_robotposition(t,l) <- 
				(prevPosition(t) = l) &
				(execute(t,moveBack)).
				
		// reason not to be on the same position is moving.
		! l [location], t [Time] :  
			Cn_robotposition(t,l) <- (robotposition(t) = l) &
										(execute(t,moveFront)).
		! l [location], t [Time] :  
			Cn_robotposition(t,l) <- (robotposition(t) = l) &
										(execute(t,moveBack)).
	}
	
	{
		// Successor State Action Axiom & Inertia position(Time,pallet):location
		! p [pallet], l [location]:	position(Start,p) = l <- I_position(p,l).
		! p [pallet], l [location], t [Time]:
			position(Next(t),p) = l <- C_position(t,p,l).
		! p [pallet], l [location], t [Time]:
			position(Next(t),p) = l <- 
				(position(t,p) = l) & ~Cn_position(t,p,l).
	}
	
	{
		// Expressing causations position(Time,pallet):location
		// Putting down a pallet is a reason to be in front of the robot
		! l [location], p [pallet], t [Time] :
			C_position(t,p,l) <- 
				execute(t,putDown(p)) &
				(nextPosition(t) = l).
		// Picking up a pallet is a reason to be at the same position of the robot.
		! l [location], p [pallet], t [Time]:
			C_position(t,p,l) <-
				execute(t,pickUp(p)) &
				(robotposition(t) = l).
		// The robot moving is a reason to be at the new place of the robot, if this pallet is being carried.
		! l [location], p [pallet], t [Time]:
			C_position(t,p,l) <-
				carried(t,p) &
				execute(t,moveFront) &
				(nextPosition(t)=l).
		! l [location], p [pallet], t [Time]:
			C_position(t,p,l) <-
				carried(t,p) &
				execute(t,moveBack) &
				(prevPosition(t)=l).
				
		// Picking up a pallet is a reason not to be on the previous pallets place.
		! l [location], p [pallet], t [Time] :  
			Cn_position(t,p,l) <- (position(t,p) = l) & execute(t,pickUp(p)).
		// Putting down a pallet is a reason not to be on the robots place.
		! l [location], p [pallet], t [Time] :  
			Cn_position(t,p,l) <- (robotposition(t) = l) & execute(t,putDown(p)).
		// The robot moving is a reason not to be on its previous place, if the pallet is being carried.
		! l [location], p [pallet], t [Time] :  
			Cn_position(t,p,l) <- 
				carried(t,p) & 
				(robotposition(t) = l) & 
				(execute(t,moveFront) | execute(t,moveBack)).
	}
}

//It is possible to make a stack containing all pallets;
theory verification1: warehousevoc{
	// There exists a time and place where all pallets are on the same location.
	? l [location], t [Time]: ! p [pallet]: position(t,p) = l.
}

//It is possible to make a stack containing all pallets;
procedure verification1proc(struc){
	basetheo = merge(solution, verification1)
	stdoptions.nbmodels = 1
	local sols = modelexpand(basetheo, struc)
	if #sols < 1 then
		print(">>>FAIL: It is NOT possible to make a stack containing all pallets!")
		return
	end
	print(">>>SUCCESS: It is possible to make a stack containing all pallets!")
}

//Any stack of at least two pallets remains a stack of at least one pallet for the next three timesteps;
theory verification2: warehousevoc{
	! t [Time], p1 [pallet], p2 [pallet], l [location]:
		(position(t,p1) = position(t,p2) = l) =>
			(position(Next(Next(Next(t))),p1) ~= l) & (position(Next(Next(Next(t))),p2) ~= l).
}

//Any stack of at least two pallets remains a stack of at least one pallet for the next three timesteps;
procedure verification2proc(struc){
	basetheo = merge(solution, verification2)
	stdoptions.nbmodels = 1
	local sols = modelexpand(basetheo, struc)
	if #sols < 1 then
		print(">>>SUCCESS: It is not possible to unstack in 3 moves!")
		return
	end
	print(">>>FAIL: It IS possible to unstack in 3 moves!")
}

//The robot cannot drive through pallets.
theory verification3: warehousevoc{
	? t [Time], p [pallet] : (nextPosition(t)=position(t,p)) & execute(t,moveFront).
}

//The robot cannot drive through pallets.
procedure verification3proc(struc){
	basetheo = merge(solution, verification3)
	stdoptions.nbmodels = 1
	local sols = modelexpand(basetheo, struc)
	if #sols < 1 then
		print(">>>SUCCESS: It is not possible to drive through pallets!")
		return
	end
	print(">>>FAIL: It IS possible to drive through pallets!")
}


procedure allVerifications(){
	strucToCheck = verStruc
	verification1proc(strucToCheck)
	verification2proc(strucToCheck)
	verification3proc(strucToCheck)
}


structure verStruc:warehousevoc{
	Time = {0..16}
	Start = 0
	Next = {0->1;1->2;2->3;3->4;4->5;5->6;6->7;7->8;8->9;9->10;10->11;11->12;12->13;13->14;14->15;15->16}
	xco={1..3}
	yco={1..3}
	height = {0..3}
	pallet={p1;p2}
	inaccessible={grid(3,2);grid(2,2)}
	ceiling = 3
}

procedure main(){
    //Depending on what you wish to do, execute one of the following methods:
	 
    //This method (defined in the instances.idp) checks some given worlds for consistency
	check()
	
	//Run our own checks
	allVerifications()

    //This method lets you walk through your solutions interactively
	//simulate_interactive(solution,verStruc)
	
    //This method walks randomly trough the solutions, 5 steps deep
	//simulate_random(solution,verStruc,5)
	
	//uncomment to find out what the reason is you do not find any models.
	//stdoptions.liftedunitpropagation=false
	//stdoptions.groundwithbounds=false
	//printcore(solution,verStruc)
	
    //This method (defined above) simply searches models of your theory
	//stdoptions.nbmodels=5 //Find 5 models	
	//printmodels(modelexpand(solution,verStruc))
	
}
