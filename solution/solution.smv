--This is a comment

MODULE main
	VAR
		--it is ALLOWED to add arguments to the constructors of pallet and robot!!!!
		robot 	: robot(1,3, palletInFront, palletInBack);
		
		--Initially, the pallets are on different locations
		pallet1		: pallet(1, 1, robot, pallet2);
		pallet2		: pallet(5, 3, robot, pallet1);
		
	DEFINE
		palletInFront := ((pallet1.inFront = TRUE) | (pallet2.inFront = TRUE)) ? TRUE : FALSE;
		palletInBack := ((pallet1.inBack = TRUE) | (pallet2.inBack = TRUE)) ? TRUE : FALSE;	

	--PUT YOUR CTL/LTL SPECIFICATIONS HERE!	
		
	-- Whatever happens, the robot can always pick up pallet 1 (at some time later).
	CTLSPEC EF (pallet1.isOnRobot = TRUE)
	
	-- It is not possible that pallet 1 is on top of pallet 2 and at the same time,
	-- pallet 2 is on top of pallet 1.
	-- With other words: in each pad this is always false in every state
	CTLSPEC AG !(pallet1.isOn = TRUE & pallet2.isOn = TRUE)
	
	-- It is possible that at a certain point in time, pallet 2 is on top of pallet 1,
	-- and at a later point in time, the stack is reversed (pallet 1 on top of pallet
	-- 2).
	CTLSPEC EF (pallet2.isOn=TRUE & pallet1.isOn=FALSE) -> EF (pallet1.isOn=TRUE & pallet2.isOn=FALSE)
	
	-- Whenever the robot and pallet 1 are at the same position, pallet 1 is
	-- carried.
	CTLSPEC AG (pallet1.isOnRobot -> pallet1.carried)
	
	-- If the robot carries pallet 1 infinitely many times and he carries pallet 2
	-- infinitely many times, then he must also rotate clockwise infinitely many
	-- times. -> in ltl
	LTLSPEC (G F pallet1.carried) & (G F pallet2.carried) -> (G F robot.action = rotate_clock)
	
	-- If at some point t in time pallet 1 is being carried, and some later time,
	-- it is no longer carried by the robot, then the following holds: starting
	-- from t, pallet 1 remains being carried until the robot performs the action
	-- drop pallet; HOE?

	
MODULE robot(initX, initY, palletInFront, palletInBack) --initX and initY are the initial x and y coordinates
	VAR
		x : 0..5;
		y : 0..5;
		orientation : {north, east, south, west};
		action : {moveFront, moveBack, pick_pallet, drop_pallet, rotate_clock, none}; 
	ASSIGN
		init(action) := none;
		init(x) := initX;
		init(y) := initY;
		init(orientation) := {north, east, south, west};
		-- go to next x, if no pallet on next x
		next(x) :=	case 	
						(action = moveFront & !palletInFront) : next_x;
						(action = moveBack & !palletInBack) : prev_x;
						TRUE: x;
					esac;
		-- go to next y, if no pallet on next y
		next(y) :=  case	
						(action = moveFront & !palletInFront) : next_y;
						(action = moveBack & !palletInBack) : prev_y;
						TRUE: y;
					esac;
		-- next random action, choosing the action does not mean he can execute this action!
		next(action) := case
							TRUE: {moveFront, moveBack, pick_pallet, drop_pallet, rotate_clock};
						esac;
		-- go to next orientation, always possible
		next(orientation) := case action = rotate_clock : next_orientation;
								TRUE: orientation;
							esac;
	DEFINE
		-- gives the next x position
		next_x := 	case 	
						orientation = east : ((x - 1 + 6) mod 6);
						orientation = west : ((x + 1) mod 6);
						TRUE: x;
					esac;
		-- gives the next y position
		next_y := 	case  	
						orientation = south: ((y - 1 + 6) mod 6);
						orientation = north: ((y + 1) mod 6);
						TRUE: y;
					esac;
		-- gives the prev x position
		prev_x := 	case 	
						orientation = east : ((x + 1) mod 6);
						orientation = west : ((x - 1 + 6) mod 6);
						TRUE: x;
					esac;
		-- gives the prev y position
		prev_y := 	case  	
						orientation = south: ((y + 1) mod 6);
						orientation = north: ((y - 1 + 6) mod 6);
						TRUE: y;
					esac;
		-- gives the next orientation
		next_orientation :=
				case	
					orientation = north : east;
					orientation = east : south;
					orientation = south : west;
					orientation = west : north;
					TRUE: orientation;
				esac; 
		-- is moving horizontal (west or east)
		move_horizontal := (orientation = west | orientation = east ) ? TRUE : FALSE;

MODULE pallet(initX, initY, robot, other_pallet) --initX and initY are the initial x and y coordinates
	VAR
		x : 0..5;
		y : 0..5;
		carried : boolean;
		isOn : boolean;
	ASSIGN
		init(x) := initX;
		init(y) := initY;
		init(isOn) := FALSE;
		init(carried) := FALSE;
		-- wordt op een andere pallet gezet of blijft op andere pallet staan
		next(isOn) := case
					!samePos | other_pallet.isOn : FALSE;
					(robot.action = pick_pallet) & inFront : FALSE;
					carried & (robot.action = drop_pallet) & other_pallet.inFront : TRUE;
					isOn & samePos & !(robot.action = pick_pallet) : TRUE;
					TRUE: FALSE;
					esac;
		-- een pallet verandert van positie als de robot deze neerzet
		-- indien deze opgepikt wordt, dan gaat deze dezelfde positie van de robot aannemen
		-- anders blijft deze uiteraard gewoon staan
		next(x) :=	 case
					carried & robot.action = drop_pallet & robot.move_horizontal: robot.next_x;
					carried : robot.x;
					TRUE: x;
					esac;
					
		next(y) :=  case
					carried & robot.action = drop_pallet & !robot.move_horizontal: robot.next_y;
					carried : robot.y;
					TRUE: y;
					esac;
		-- een pallet kan opgepikt worden indien ze nog niet opgepikt is, de robot de pallet wil oppakken (en nog geen andere pallet opgepikt heeft)
		-- en de robot voor de pallet staat, zolang de andere pallet zich niet bovenop deze pallet bevindt
		-- als een pallet opgepikt is, kan deze opgepikt blijven zolang ze niet neergezet wordt (ze moet hiervoor wel op dezelfde positie staan)
		next(carried) := case
							(robot.action = pick_pallet) & inFront & !isOn : TRUE;
							carried & !(robot.action = drop_pallet): TRUE;
							TRUE: FALSE;
						esac;
	DEFINE
		-- the pallet is in the front of a robot
		inFront := case 
					robot.move_horizontal & (x = robot.next_x) & (y = robot.y) : TRUE;
					!robot.move_horizontal & (x = robot.x) & (y = robot.next_y) : TRUE;
				TRUE: FALSE;
				esac;
		-- pallet is on same position by the robot
		isOnRobot := ((x = robot.x) & (y = robot.y)) ? TRUE : FALSE;
		-- the pallet is in the back of a robot
		inBack := case 
				robot.move_horizontal & (x = robot.prev_x) & (y = robot.y) : TRUE;
				!robot.move_horizontal & (x = robot.x) & (y = robot.prev_y) : TRUE;
				TRUE: FALSE;
					esac;
		-- same position as other pallet
		samePos := (other_pallet.x = x & other_pallet.y = y) ? TRUE : FALSE;